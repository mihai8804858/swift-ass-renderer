{"sections":[{"kind":"hero","title":"Custom Processing","chapter":"Custom Image Processing","content":[{"inlineContent":[{"text":"Learn how to create a custom image pipeline to process and combine the incoming images into a final image.","type":"text"}],"type":"paragraph"}],"estimatedTimeInMinutes":30},{"kind":"tasks","tasks":[{"title":"Custom Processing","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"In this section we will create a basic view controller and a custom implementation of ","type":"text"},{"code":"ImagePipelineType","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"that we will use to process the incoming images by creating ","type":"text"},{"type":"codeVoice","code":"CGImage"},{"type":"text","text":"s and combining them using "},{"code":"UIGraphicsImageRenderer","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"mediaPosition":"trailing","media":"logo-rounded.png"}],"stepsSection":[{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s start by creating a new view and naming it ","type":"text"},{"type":"codeVoice","code":"VideoPlayerView"},{"type":"text","text":". We also need to import "},{"type":"codeVoice","code":"SwiftUI"},{"text":", ","type":"text"},{"code":"AVKit","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"SwiftLibass"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SwiftAssRenderer"},{"text":".","type":"text"}]}],"media":null,"runtimePreview":null,"code":"customprocessing-1.swift","type":"step"},{"type":"step","code":"customprocessing-2.swift","content":[{"inlineContent":[{"type":"text","text":"We will need an instance of "},{"type":"codeVoice","code":"AVPlayer"},{"type":"text","text":". Let’s create one by providing either a local or remove URL."},{"type":"text","text":" "},{"type":"text","text":"Let’s also create the "},{"type":"codeVoice","code":"AssSubtitlesRenderer"},{"type":"text","text":" by providing the URL path to where the fonts are localted."}],"type":"paragraph"}],"media":null,"caption":[],"runtimePreview":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Now let’s add a ","type":"text"},{"type":"codeVoice","code":"VideoPlayer"},{"text":" to view hierarchy and on appearance start the playback.","type":"text"}]}],"type":"step","media":null,"runtimePreview":null,"code":"customprocessing-3.swift"},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Next, we can add the ","type":"text"},{"type":"codeVoice","code":"AssSubtitles"},{"type":"text","text":" view as a video overlay and attach the player so the subtitles offset is updated."}]}],"code":"customprocessing-4.swift","caption":[],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s load the subtitles contents and load the track into the renderer."}]}],"media":null,"runtimePreview":null,"code":"customprocessing-5.swift","caption":[],"type":"step"},{"media":null,"code":"customprocessing-6.swift","caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"In order to customise the image processing, we need to create a new type conforming to "},{"type":"codeVoice","code":"ImagePipelineType"},{"type":"text","text":", and inject this new pipeline into the renderer."}],"type":"paragraph"}],"runtimePreview":null},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"In order for us to be able to “merge” all the images into one single image, we we will need a helper method that will convert an "},{"type":"codeVoice","code":"ASS_Image"},{"type":"text","text":" into a "},{"code":"CGImage","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and also will give us the rect where that image should be rendered in the canvas."}],"type":"paragraph"}],"type":"step","caption":[],"code":"customprocessing-7.swift","runtimePreview":null},{"runtimePreview":null,"code":"customprocessing-8.swift","media":null,"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Let’s create another helper method that will take a list of "},{"type":"codeVoice","code":"CGImage"},{"type":"text","text":"s and the bounding rect of the final image, and will combine all the images into one."}],"type":"paragraph"}]},{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"We can construct the rect for an ","type":"text"},{"type":"codeVoice","code":"ASS_Image"},{"text":" by using the provided width, height, x and y position from ","type":"text"},{"code":"libass","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","code":"customprocessing-9.swift","caption":[]},{"runtimePreview":null,"caption":[],"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Since the "},{"type":"codeVoice","code":"bitmap"},{"text":" from ","type":"text"},{"code":"ASS_Image","type":"codeVoice"},{"text":" is a single alpha channel monochrome bitmap plus a color, we need to convert this bitmap into a 4-channel RGBA bitmap.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The library provides a helper to convert a monochrome to a palettized bitmap, also to construct a "},{"code":"CGImage","type":"codeVoice"},{"text":" from a RGBA bitmap.","type":"text"}],"type":"paragraph"}],"code":"customprocessing-10.swift"},{"type":"step","content":[{"inlineContent":[{"text":"We will use the ","type":"text"},{"code":"UIGraphicsImageRenderer","type":"codeVoice"},{"type":"text","text":" to render all "},{"type":"codeVoice","code":"CGImage"},{"text":"s into a single ","type":"text"},{"code":"CGContext","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"We will render this images at a 1x scale since ","type":"text"},{"type":"codeVoice","code":"AssSubtitlesRender"},{"text":" already takes care of scaling the canvas and the images based on the screen scale.","type":"text"}],"type":"paragraph"}],"code":"customprocessing-11.swift","media":null,"runtimePreview":null,"caption":[]},{"runtimePreview":null,"caption":[],"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s use the "},{"code":"image(_:)","type":"codeVoice"},{"text":" method to render in the ","type":"text"},{"code":"CGContext","type":"codeVoice"},{"text":" and create a final ","type":"text"},{"code":"UIImage","type":"codeVoice"},{"type":"text","text":" from the context."}]}],"code":"customprocessing-12.swift"},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"Because the coordinate system when rendering in the "},{"code":"CGContext","type":"codeVoice"},{"text":" is different from the usual coordinate system (the origin starts at bottom left corner),","type":"text"},{"type":"text","text":" "},{"text":"we will use a ","type":"text"},{"type":"codeVoice","code":"CGAffineTransform"},{"text":" to vertically flip the ","type":"text"},{"code":"CGContext","type":"codeVoice"},{"type":"text","text":" so we can render from top left corner."}],"type":"paragraph"}],"type":"step","code":"customprocessing-13.swift","runtimePreview":null,"caption":[]},{"media":null,"type":"step","code":"customprocessing-14.swift","content":[{"type":"paragraph","inlineContent":[{"text":"We need another helper method that will use the previous helper to flip the context, perform some actions, and then reset the context back to previous coordinate system.","type":"text"}]}],"runtimePreview":null,"caption":[]},{"caption":[],"code":"customprocessing-15.swift","content":[{"inlineContent":[{"type":"text","text":"In the rendering block, let’s iterate over all images and use the previous helper to render in the context from top left position."}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"While the ","type":"text"},{"type":"codeVoice","code":"CGContext"},{"text":" rendering will happen from top left cornet, the image rect y position still need to be adjusted by flipping it.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Also, since the image rect is in the canvas coordinate system, but we’re rendering in the final image bounding rect,"},{"type":"text","text":" "},{"type":"text","text":"we need to convert the origin by substracting from canvas origin the bounding rect origin."}]}],"code":"customprocessing-16.swift","type":"step","caption":[],"media":null},{"type":"step","runtimePreview":null,"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"The last thing left to do is to draw the "},{"type":"codeVoice","code":"CGImage"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CGContext"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"customprocessing-17.swift"},{"type":"step","caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Finally, let’s run the app. And as expected, we can see the subtitles showing and being updated.","type":"text"}]}],"media":"custom-processing.gif","code":null}],"anchor":"Custom-Processing"}]}],"kind":"project","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/swiftassrenderer\/customimageprocessing"]}],"hierarchy":{"paths":[["doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/Advanced-Tutorials","doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/Advanced-Tutorials\/$volume","doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/Advanced-Tutorials\/Custom-Image-Processing"]],"reference":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/Advanced-Tutorials","modules":[{"reference":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/Advanced-Tutorials\/Custom-View-Integration","projects":[{"reference":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomViewIntegration","sections":[{"reference":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomViewIntegration#Custom-View-Integration","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomImageDrawing","sections":[{"reference":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomImageDrawing#Custom-Drawing","kind":"task"}]}],"reference":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/Advanced-Tutorials\/Custom-Image-Drawing"},{"reference":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/Advanced-Tutorials\/Custom-Image-Processing","projects":[{"reference":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomImageProcessing","sections":[{"reference":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomImageProcessing#Custom-Processing","kind":"task"}]}]}]},"metadata":{"categoryPathComponent":"Advanced-Tutorials","category":"Advanced","title":"Custom Processing","role":"project"},"identifier":{"url":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomImageProcessing","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"customprocessing-7.swift":{"type":"file","fileType":"swift","content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...),","        pipeline: ImagePipeline()","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}","","final class ImagePipeline: ImagePipelineType {","    func process(images: [ASS_Image], boundingRect: CGRect) -> ProcessedImage? {","        let cgImages = images.compactMap(makeCGImage)","    }","","    private func makeCGImage(from image: ASS_Image) -> (CGRect, CGImage)? {","","    }","}"],"syntax":"swift","highlights":[{"line":40},{"line":41},{"line":43},{"line":44}],"fileName":"SubtitlesViewController.swift","identifier":"customprocessing-7.swift"},"logo-rounded.png":{"alt":"Logo image","identifier":"logo-rounded.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/swift-ass-renderer.SwiftAssRenderer\/logo-rounded.png"}]},"customprocessing-9.swift":{"type":"file","fileType":"swift","content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...),","        pipeline: ImagePipeline()","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}","","final class ImagePipeline: ImagePipelineType {","    func process(images: [ASS_Image], boundingRect: CGRect) -> ProcessedImage? {","        let cgImages = images.compactMap(makeCGImage)","        let finalImage = combineCGImages(cgImages, boundingRect: boundingRect)","","        return finalImage.flatMap { ProcessedImage(image: $0, imageRect: boundingRect) }","    }","","    private func makeCGImage(from image: ASS_Image) -> (CGRect, CGImage)? {","        let origin = CGPoint(x: Int(image.dst_x), y: Int(image.dst_y))","        let size = CGSize(width: Int(image.w), height: Int(image.h))","        let rect = CGRect(origin: origin, size: size)","    }","","    private func combineCGImages(_ images: [(CGRect, CGImage)], boundingRect: CGRect) -> CGImage? {","","    }","}"],"syntax":"swift","highlights":[{"line":47},{"line":48},{"line":49}],"fileName":"SubtitlesViewController.swift","identifier":"customprocessing-9.swift"},"doc://swift-ass-renderer.SwiftAssRenderer/tutorials/SwiftAssRenderer/CustomImageDrawing#Custom-Drawing":{"identifier":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomImageDrawing#Custom-Drawing","kind":"section","type":"section","role":"pseudoSymbol","url":"\/tutorials\/swiftassrenderer\/customimagedrawing#Custom-Drawing","abstract":[{"text":"Learn how to manually integrate ","type":"text"},{"code":"AssSubtitlesRenderer","type":"codeVoice"},{"type":"text","text":" with your view."}],"title":"Custom Drawing"},"customprocessing-1.swift":{"content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    var body: some View {","","    }","}"],"identifier":"customprocessing-1.swift","fileName":"SubtitlesViewController.swift","syntax":"swift","fileType":"swift","highlights":[],"type":"file"},"custom-processing.gif":{"alt":"Black rectangle with a text at the bottom that says \\\"Wow!\\\"","identifier":"custom-processing.gif","type":"image","variants":[{"url":"\/images\/swift-ass-renderer.SwiftAssRenderer\/custom-processing.gif","traits":["1x","light"]}]},"customprocessing-8.swift":{"content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...),","        pipeline: ImagePipeline()","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}","","final class ImagePipeline: ImagePipelineType {","    func process(images: [ASS_Image], boundingRect: CGRect) -> ProcessedImage? {","        let cgImages = images.compactMap(makeCGImage)","        let finalImage = combineCGImages(cgImages, boundingRect: boundingRect)","","        return finalImage.flatMap { ProcessedImage(image: $0, imageRect: boundingRect) }","    }","","    private func makeCGImage(from image: ASS_Image) -> (CGRect, CGImage)? {","","    }","","    private func combineCGImages(_ images: [(CGRect, CGImage)], boundingRect: CGRect) -> CGImage? {","","    }","}"],"identifier":"customprocessing-8.swift","fileName":"SubtitlesViewController.swift","syntax":"swift","fileType":"swift","highlights":[{"line":41},{"line":42},{"line":43},{"line":49},{"line":50},{"line":51},{"line":52}],"type":"file"},"customprocessing-16.swift":{"type":"file","fileType":"swift","content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...),","        pipeline: ImagePipeline()","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}","","final class ImagePipeline: ImagePipelineType {","    func process(images: [ASS_Image], boundingRect: CGRect) -> ProcessedImage? {","        let cgImages = images.compactMap(makeCGImage)","        let finalImage = combineCGImages(cgImages, boundingRect: boundingRect)","","        return finalImage.flatMap { ProcessedImage(image: $0, imageRect: boundingRect) }","    }","","    private func makeCGImage(from image: ASS_Image) -> (CGRect, CGImage)? {","        let origin = CGPoint(x: Int(image.dst_x), y: Int(image.dst_y))","        let size = CGSize(width: Int(image.w), height: Int(image.h))","        let rect = CGRect(origin: origin, size: size)","        guard let bitmap = palettizedBitmapRGBA(image),","              let buffer = bitmap.baseAddress,","              let cgImage = makeCGImage(","                buffer: buffer,","                size: size,","                colorSpace: CGColorSpaceCreateDeviceRGB(),","                bitmapInfo: CGBitmapInfo(rawValue: CGImageAlphaInfo.last.rawValue)","              ) else { return nil }","","        return (rect, cgImage)","    }","","    private func combineCGImages(_ images: [(CGRect, CGImage)], boundingRect: CGRect) -> CGImage? {","        let traitCollection = UITraitCollection(displayScale: 1.0)","        let rendererFormat = UIGraphicsImageRendererFormat(for: traitCollection)","        let renderer = UIGraphicsImageRenderer(size: boundingRect.size, format: rendererFormat)","        let image = renderer.image { context in","            for (rect, cgImage) in images {","                context.cgContext.byFlippingVertically(height: rect.size.height) {","                    let relativeRect = CGRect(","                        origin: CGPoint(","                            x: rect.minX - boundingRect.minX,","                            y: -(rect.minY - boundingRect.minY)","                        ),","                        size: rect.size","                    )","                }","            }","        }","","        return image.cgImage","    }","}","","extension CGAffineTransform {","    static func flippingVertically(_ height: CGFloat) -> CGAffineTransform {","        var transform = CGAffineTransform(scaleX: 1, y: -1)","        transform = transform.translatedBy(x: 0, y: -height)","","        return transform","    }","}","","extension CGContext {","    func byFlippingVertically(height: CGFloat, actions: () -> Void) {","        let transform = CGAffineTransform.flippingVertically(height)","        concatenate(transform)","        actions()","        concatenate(transform.inverted())","    }","}"],"syntax":"swift","highlights":[{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75}],"fileName":"SubtitlesViewController.swift","identifier":"customprocessing-16.swift"},"customprocessing-2.swift":{"content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...)","    )","","    var body: some View {","","    }","}"],"identifier":"customprocessing-2.swift","fileName":"SubtitlesViewController.swift","syntax":"swift","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"type":"file"},"customprocessing-3.swift":{"type":"file","fileType":"swift","content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...)","    )","","    var body: some View {","        VideoPlayer(player: player)","            .onAppear(perform: setupPlayer)","    }","","    private func setupPlayer() {","        player.play()","    }","}"],"syntax":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":17},{"line":18}],"fileName":"SubtitlesViewController.swift","identifier":"customprocessing-3.swift"},"doc://swift-ass-renderer.SwiftAssRenderer/tutorials/SwiftAssRenderer/CustomImageDrawing":{"kind":"project","identifier":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomImageDrawing","type":"topic","role":"project","estimatedTime":"10min","url":"\/tutorials\/swiftassrenderer\/customimagedrawing","abstract":[{"type":"text","text":"Learn how to manually integrate "},{"code":"AssSubtitlesRenderer","type":"codeVoice"},{"type":"text","text":" with your view."}],"title":"Custom Drawing"},"customprocessing-14.swift":{"content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...),","        pipeline: ImagePipeline()","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}","","final class ImagePipeline: ImagePipelineType {","    func process(images: [ASS_Image], boundingRect: CGRect) -> ProcessedImage? {","        let cgImages = images.compactMap(makeCGImage)","        let finalImage = combineCGImages(cgImages, boundingRect: boundingRect)","","        return finalImage.flatMap { ProcessedImage(image: $0, imageRect: boundingRect) }","    }","","    private func makeCGImage(from image: ASS_Image) -> (CGRect, CGImage)? {","        let origin = CGPoint(x: Int(image.dst_x), y: Int(image.dst_y))","        let size = CGSize(width: Int(image.w), height: Int(image.h))","        let rect = CGRect(origin: origin, size: size)","        guard let bitmap = palettizedBitmapRGBA(image),","              let buffer = bitmap.baseAddress,","              let cgImage = makeCGImage(","                buffer: buffer,","                size: size,","                colorSpace: CGColorSpaceCreateDeviceRGB(),","                bitmapInfo: CGBitmapInfo(rawValue: CGImageAlphaInfo.last.rawValue)","              ) else { return nil }","","        return (rect, cgImage)","    }","","    private func combineCGImages(_ images: [(CGRect, CGImage)], boundingRect: CGRect) -> CGImage? {","        let traitCollection = UITraitCollection(displayScale: 1.0)","        let rendererFormat = UIGraphicsImageRendererFormat(for: traitCollection)","        let renderer = UIGraphicsImageRenderer(size: boundingRect.size, format: rendererFormat)","        let image = renderer.image { context in","","        }","","        return image.cgImage","    }","}","","extension CGAffineTransform {","    static func flippingVertically(_ height: CGFloat) -> CGAffineTransform {","        var transform = CGAffineTransform(scaleX: 1, y: -1)","        transform = transform.translatedBy(x: 0, y: -height)","","        return transform","    }","}","","extension CGContext {","    func byFlippingVertically(height: CGFloat, actions: () -> Void) {","        let transform = CGAffineTransform.flippingVertically(height)","        concatenate(transform)","        actions()","        concatenate(transform.inverted())","    }","}"],"identifier":"customprocessing-14.swift","fileName":"SubtitlesViewController.swift","syntax":"swift","fileType":"swift","highlights":[{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90}],"type":"file"},"customprocessing-4.swift":{"type":"file","fileType":"swift","content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...)","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","    }","","    private func setupPlayer() {","        player.play()","    }","}"],"syntax":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"fileName":"SubtitlesViewController.swift","identifier":"customprocessing-4.swift"},"customprocessing-15.swift":{"content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...),","        pipeline: ImagePipeline()","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}","","final class ImagePipeline: ImagePipelineType {","    func process(images: [ASS_Image], boundingRect: CGRect) -> ProcessedImage? {","        let cgImages = images.compactMap(makeCGImage)","        let finalImage = combineCGImages(cgImages, boundingRect: boundingRect)","","        return finalImage.flatMap { ProcessedImage(image: $0, imageRect: boundingRect) }","    }","","    private func makeCGImage(from image: ASS_Image) -> (CGRect, CGImage)? {","        let origin = CGPoint(x: Int(image.dst_x), y: Int(image.dst_y))","        let size = CGSize(width: Int(image.w), height: Int(image.h))","        let rect = CGRect(origin: origin, size: size)","        guard let bitmap = palettizedBitmapRGBA(image),","              let buffer = bitmap.baseAddress,","              let cgImage = makeCGImage(","                buffer: buffer,","                size: size,","                colorSpace: CGColorSpaceCreateDeviceRGB(),","                bitmapInfo: CGBitmapInfo(rawValue: CGImageAlphaInfo.last.rawValue)","              ) else { return nil }","","        return (rect, cgImage)","    }","","    private func combineCGImages(_ images: [(CGRect, CGImage)], boundingRect: CGRect) -> CGImage? {","        let traitCollection = UITraitCollection(displayScale: 1.0)","        let rendererFormat = UIGraphicsImageRendererFormat(for: traitCollection)","        let renderer = UIGraphicsImageRenderer(size: boundingRect.size, format: rendererFormat)","        let image = renderer.image { context in","            for (rect, cgImage) in images {","                context.cgContext.byFlippingVertically(height: rect.size.height) {","","                }","            }","        }","","        return image.cgImage","    }","}","","extension CGAffineTransform {","    static func flippingVertically(_ height: CGFloat) -> CGAffineTransform {","        var transform = CGAffineTransform(scaleX: 1, y: -1)","        transform = transform.translatedBy(x: 0, y: -height)","","        return transform","    }","}","","extension CGContext {","    func byFlippingVertically(height: CGFloat, actions: () -> Void) {","        let transform = CGAffineTransform.flippingVertically(height)","        concatenate(transform)","        actions()","        concatenate(transform.inverted())","    }","}"],"identifier":"customprocessing-15.swift","fileName":"SubtitlesViewController.swift","syntax":"swift","fileType":"swift","highlights":[{"line":67},{"line":68},{"line":70},{"line":71}],"type":"file"},"customprocessing-10.swift":{"type":"file","fileType":"swift","content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...),","        pipeline: ImagePipeline()","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}","","final class ImagePipeline: ImagePipelineType {","    func process(images: [ASS_Image], boundingRect: CGRect) -> ProcessedImage? {","        let cgImages = images.compactMap(makeCGImage)","        let finalImage = combineCGImages(cgImages, boundingRect: boundingRect)","","        return finalImage.flatMap { ProcessedImage(image: $0, imageRect: boundingRect) }","    }","","    private func makeCGImage(from image: ASS_Image) -> (CGRect, CGImage)? {","        let origin = CGPoint(x: Int(image.dst_x), y: Int(image.dst_y))","        let size = CGSize(width: Int(image.w), height: Int(image.h))","        let rect = CGRect(origin: origin, size: size)","        guard let bitmap = palettizedBitmapRGBA(image),","              let buffer = bitmap.baseAddress,","              let cgImage = makeCGImage(","                buffer: buffer,","                size: size,","                colorSpace: CGColorSpaceCreateDeviceRGB(),","                bitmapInfo: CGBitmapInfo(rawValue: CGImageAlphaInfo.last.rawValue)","              ) else { return nil }","","        return (rect, cgImage)","    }","","    private func combineCGImages(_ images: [(CGRect, CGImage)], boundingRect: CGRect) -> CGImage? {","","    }","}"],"syntax":"swift","highlights":[{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59}],"fileName":"SubtitlesViewController.swift","identifier":"customprocessing-10.swift"},"customprocessing-13.swift":{"content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...),","        pipeline: ImagePipeline()","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}","","final class ImagePipeline: ImagePipelineType {","    func process(images: [ASS_Image], boundingRect: CGRect) -> ProcessedImage? {","        let cgImages = images.compactMap(makeCGImage)","        let finalImage = combineCGImages(cgImages, boundingRect: boundingRect)","","        return finalImage.flatMap { ProcessedImage(image: $0, imageRect: boundingRect) }","    }","","    private func makeCGImage(from image: ASS_Image) -> (CGRect, CGImage)? {","        let origin = CGPoint(x: Int(image.dst_x), y: Int(image.dst_y))","        let size = CGSize(width: Int(image.w), height: Int(image.h))","        let rect = CGRect(origin: origin, size: size)","        guard let bitmap = palettizedBitmapRGBA(image),","              let buffer = bitmap.baseAddress,","              let cgImage = makeCGImage(","                buffer: buffer,","                size: size,","                colorSpace: CGColorSpaceCreateDeviceRGB(),","                bitmapInfo: CGBitmapInfo(rawValue: CGImageAlphaInfo.last.rawValue)","              ) else { return nil }","","        return (rect, cgImage)","    }","","    private func combineCGImages(_ images: [(CGRect, CGImage)], boundingRect: CGRect) -> CGImage? {","        let traitCollection = UITraitCollection(displayScale: 1.0)","        let rendererFormat = UIGraphicsImageRendererFormat(for: traitCollection)","        let renderer = UIGraphicsImageRenderer(size: boundingRect.size, format: rendererFormat)","        let image = renderer.image { context in","","        }","","        return image.cgImage","    }","}","","extension CGAffineTransform {","    static func flippingVertically(_ height: CGFloat) -> CGAffineTransform {","        var transform = CGAffineTransform(scaleX: 1, y: -1)","        transform = transform.translatedBy(x: 0, y: -height)","","        return transform","    }","}"],"identifier":"customprocessing-13.swift","fileName":"SubtitlesViewController.swift","syntax":"swift","fileType":"swift","highlights":[{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81}],"type":"file"},"customprocessing-17.swift":{"type":"file","fileType":"swift","content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...),","        pipeline: ImagePipeline()","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}","","final class ImagePipeline: ImagePipelineType {","    func process(images: [ASS_Image], boundingRect: CGRect) -> ProcessedImage? {","        let cgImages = images.compactMap(makeCGImage)","        let finalImage = combineCGImages(cgImages, boundingRect: boundingRect)","","        return finalImage.flatMap { ProcessedImage(image: $0, imageRect: boundingRect) }","    }","","    private func makeCGImage(from image: ASS_Image) -> (CGRect, CGImage)? {","        let origin = CGPoint(x: Int(image.dst_x), y: Int(image.dst_y))","        let size = CGSize(width: Int(image.w), height: Int(image.h))","        let rect = CGRect(origin: origin, size: size)","        guard let bitmap = palettizedBitmapRGBA(image),","              let buffer = bitmap.baseAddress,","              let cgImage = makeCGImage(","                buffer: buffer,","                size: size,","                colorSpace: CGColorSpaceCreateDeviceRGB(),","                bitmapInfo: CGBitmapInfo(rawValue: CGImageAlphaInfo.last.rawValue)","              ) else { return nil }","","        return (rect, cgImage)","    }","","    private func combineCGImages(_ images: [(CGRect, CGImage)], boundingRect: CGRect) -> CGImage? {","        let traitCollection = UITraitCollection(displayScale: 1.0)","        let rendererFormat = UIGraphicsImageRendererFormat(for: traitCollection)","        let renderer = UIGraphicsImageRenderer(size: boundingRect.size, format: rendererFormat)","        let image = renderer.image { context in","            for (rect, cgImage) in images {","                context.cgContext.byFlippingVertically(height: rect.size.height) {","                    let relativeRect = CGRect(","                        origin: CGPoint(","                            x: rect.minX - boundingRect.minX,","                            y: -(rect.minY - boundingRect.minY)","                        ),","                        size: rect.size","                    )","                    context.cgContext.draw(cgImage, in: relativeRect, byTiling: false)","                }","            }","        }","","        return image.cgImage","    }","}","","extension CGAffineTransform {","    static func flippingVertically(_ height: CGFloat) -> CGAffineTransform {","        var transform = CGAffineTransform(scaleX: 1, y: -1)","        transform = transform.translatedBy(x: 0, y: -height)","","        return transform","    }","}","","extension CGContext {","    func byFlippingVertically(height: CGFloat, actions: () -> Void) {","        let transform = CGAffineTransform.flippingVertically(height)","        concatenate(transform)","        actions()","        concatenate(transform.inverted())","    }","}"],"syntax":"swift","highlights":[{"line":76}],"fileName":"SubtitlesViewController.swift","identifier":"customprocessing-17.swift"},"doc://swift-ass-renderer.SwiftAssRenderer/tutorials/SwiftAssRenderer/CustomImageProcessing":{"type":"topic","identifier":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomImageProcessing","url":"\/tutorials\/swiftassrenderer\/customimageprocessing","estimatedTime":"30min","title":"Custom Processing","role":"project","abstract":[{"text":"Learn how to create a custom image pipeline to process and combine the incoming images into a final image.","type":"text"}],"kind":"project"},"doc://swift-ass-renderer.SwiftAssRenderer/tutorials/SwiftAssRenderer/CustomImageProcessing#Custom-Processing":{"kind":"section","identifier":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomImageProcessing#Custom-Processing","type":"section","role":"pseudoSymbol","url":"\/tutorials\/swiftassrenderer\/customimageprocessing#Custom-Processing","abstract":[{"text":"Learn how to create a custom image pipeline to process and combine the incoming images into a final image.","type":"text"}],"title":"Custom Processing"},"doc://swift-ass-renderer.SwiftAssRenderer/tutorials/Advanced-Tutorials/Custom-Image-Processing":{"title":"Custom Image Processing","role":"article","type":"topic","identifier":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/Advanced-Tutorials\/Custom-Image-Processing","url":"\/tutorials\/advanced-tutorials\/custom-image-processing","kind":"article","abstract":[]},"doc://swift-ass-renderer.SwiftAssRenderer/tutorials/SwiftAssRenderer/CustomViewIntegration":{"identifier":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomViewIntegration","kind":"project","type":"topic","role":"project","estimatedTime":"10min","url":"\/tutorials\/swiftassrenderer\/customviewintegration","abstract":[{"type":"text","text":"Learn how to integrate "},{"code":"AssSubtitlesView","type":"codeVoice"},{"text":" into any view.","type":"text"}],"title":"Custom View Integration"},"doc://swift-ass-renderer.SwiftAssRenderer/tutorials/SwiftAssRenderer/CustomViewIntegration#Custom-View-Integration":{"identifier":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/SwiftAssRenderer\/CustomViewIntegration#Custom-View-Integration","kind":"section","type":"section","role":"pseudoSymbol","url":"\/tutorials\/swiftassrenderer\/customviewintegration#Custom-View-Integration","abstract":[{"text":"Learn how to integrate ","type":"text"},{"type":"codeVoice","code":"AssSubtitlesView"},{"text":" into any view.","type":"text"}],"title":"Custom View Integration"},"customprocessing-12.swift":{"content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...),","        pipeline: ImagePipeline()","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}","","final class ImagePipeline: ImagePipelineType {","    func process(images: [ASS_Image], boundingRect: CGRect) -> ProcessedImage? {","        let cgImages = images.compactMap(makeCGImage)","        let finalImage = combineCGImages(cgImages, boundingRect: boundingRect)","","        return finalImage.flatMap { ProcessedImage(image: $0, imageRect: boundingRect) }","    }","","    private func makeCGImage(from image: ASS_Image) -> (CGRect, CGImage)? {","        let origin = CGPoint(x: Int(image.dst_x), y: Int(image.dst_y))","        let size = CGSize(width: Int(image.w), height: Int(image.h))","        let rect = CGRect(origin: origin, size: size)","        guard let bitmap = palettizedBitmapRGBA(image),","              let buffer = bitmap.baseAddress,","              let cgImage = makeCGImage(","                buffer: buffer,","                size: size,","                colorSpace: CGColorSpaceCreateDeviceRGB(),","                bitmapInfo: CGBitmapInfo(rawValue: CGImageAlphaInfo.last.rawValue)","              ) else { return nil }","","        return (rect, cgImage)","    }","","    private func combineCGImages(_ images: [(CGRect, CGImage)], boundingRect: CGRect) -> CGImage? {","        let traitCollection = UITraitCollection(displayScale: 1.0)","        let rendererFormat = UIGraphicsImageRendererFormat(for: traitCollection)","        let renderer = UIGraphicsImageRenderer(size: boundingRect.size, format: rendererFormat)","        let image = renderer.image { context in","","        }","","        return image.cgImage","    }","}"],"identifier":"customprocessing-12.swift","fileName":"SubtitlesViewController.swift","syntax":"swift","fileType":"swift","highlights":[{"line":66},{"line":67},{"line":68},{"line":69},{"line":70}],"type":"file"},"customprocessing-6.swift":{"type":"file","fileType":"swift","content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...),","        pipeline: ImagePipeline()","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}","","final class ImagePipeline: ImagePipelineType {","    func process(images: [ASS_Image], boundingRect: CGRect) -> ProcessedImage? {","","    }","}"],"syntax":"swift","highlights":[{"line":9},{"line":10},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42}],"fileName":"SubtitlesViewController.swift","identifier":"customprocessing-6.swift"},"doc://swift-ass-renderer.SwiftAssRenderer/tutorials/Advanced-Tutorials":{"identifier":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/Advanced-Tutorials","kind":"overview","type":"topic","role":"overview","url":"\/tutorials\/advanced-tutorials","abstract":[{"code":"SwiftAssRenderer","type":"codeVoice"},{"type":"text","text":" can be extended with custom implementations for image processing, image drawing, and also integrating it in a custom view."}],"title":"Advanced"},"doc://swift-ass-renderer.SwiftAssRenderer/tutorials/Advanced-Tutorials/Custom-Image-Drawing":{"identifier":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/Advanced-Tutorials\/Custom-Image-Drawing","kind":"article","type":"topic","role":"article","url":"\/tutorials\/advanced-tutorials\/custom-image-drawing","abstract":[],"title":"Custom Image Drawing"},"doc://swift-ass-renderer.SwiftAssRenderer/tutorials/Advanced-Tutorials/Custom-View-Integration":{"kind":"article","identifier":"doc:\/\/swift-ass-renderer.SwiftAssRenderer\/tutorials\/Advanced-Tutorials\/Custom-View-Integration","type":"topic","role":"article","url":"\/tutorials\/advanced-tutorials\/custom-view-integration","abstract":[],"title":"Custom View Integration"},"customprocessing-5.swift":{"content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...)","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}"],"identifier":"customprocessing-5.swift","fileName":"SubtitlesViewController.swift","syntax":"swift","fileType":"swift","highlights":[{"line":18},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"type":"file"},"customprocessing-11.swift":{"type":"file","fileType":"swift","content":["import SwiftUI","import AVKit","import SwiftLibass","import SwiftAssRenderer","","struct VideoPlayerView: View {","    private let player = AVPlayer(url: ...)","    private let renderer = AssSubtitlesRenderer(","        fontConfig: FontConfig(fontsPath: ...),","        pipeline: ImagePipeline()","    )","","    var body: some View {","        VideoPlayer(player: player) {","            AssSubtitles(renderer: renderer)","                .attach(player: player, updateInterval: CMTime(value: 1, timescale: 10))","        }","        .onAppear(perform: setupPlayer)","        .onAppear(perform: loadSubtitleTrack)","    }","","    private func setupPlayer() {","        player.play()","    }","","    private func loadSubtitleTrack() {","        Task {","            do {","                let contents = try await ...","                renderer.loadTrack(content: contents)","            } catch {","                print(error)","            }","        }","    }","}","","final class ImagePipeline: ImagePipelineType {","    func process(images: [ASS_Image], boundingRect: CGRect) -> ProcessedImage? {","        let cgImages = images.compactMap(makeCGImage)","        let finalImage = combineCGImages(cgImages, boundingRect: boundingRect)","","        return finalImage.flatMap { ProcessedImage(image: $0, imageRect: boundingRect) }","    }","","    private func makeCGImage(from image: ASS_Image) -> (CGRect, CGImage)? {","        let origin = CGPoint(x: Int(image.dst_x), y: Int(image.dst_y))","        let size = CGSize(width: Int(image.w), height: Int(image.h))","        let rect = CGRect(origin: origin, size: size)","        guard let bitmap = palettizedBitmapRGBA(image),","              let buffer = bitmap.baseAddress,","              let cgImage = makeCGImage(","                buffer: buffer,","                size: size,","                colorSpace: CGColorSpaceCreateDeviceRGB(),","                bitmapInfo: CGBitmapInfo(rawValue: CGImageAlphaInfo.last.rawValue)","              ) else { return nil }","","        return (rect, cgImage)","    }","","    private func combineCGImages(_ images: [(CGRect, CGImage)], boundingRect: CGRect) -> CGImage? {","        let traitCollection = UITraitCollection(displayScale: 1.0)","        let rendererFormat = UIGraphicsImageRendererFormat(for: traitCollection)","        let renderer = UIGraphicsImageRenderer(size: boundingRect.size, format: rendererFormat)","    }","}"],"syntax":"swift","highlights":[{"line":63},{"line":64},{"line":65}],"fileName":"SubtitlesViewController.swift","identifier":"customprocessing-11.swift"}}}